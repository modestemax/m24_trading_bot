'use strict';

var expect = require('chai').expect;
var uniqNm = require('./lib/nomenclt');
var extExistence = require('./lib/extends-existence');
var extCreate = require('./lib/extends-create');
var extModify = require('./lib/extends-modify');
var extRemove = require('./lib/extends-remove');
var findByUnique = require('./lib/find-by-unique');
var matchByUnique = require('./lib/match-by-unique');
var matchListByUnique = require('./lib/match-list-by-unique');
var updateUniqueSet = require('./lib/update-unique-set');
var sidOfUnique = require('./lib/sid-of-unique');

module.exports = function (Record, uniqSetting) {
    if (Record.uniquesSet) {
        return;
    }
    var uniqConf = uniqSetting || {};
    expect(uniqConf).to.be.an.instanceOf(Object);
    Record.uniqDefKeys = function () {
        return Object.keys(uniqConf);
    };
    Record.uniqFieldsOf = function (uniqDef) {
        return Array.prototype.slice.call(uniqConf[uniqDef] || []);
    };

    Record.setUniqueDef = function (def, conf) {
        expect(def).to.be.a('string');
        expect(def.length).to.be.above(0);
        expect(conf).to.be.an.instanceOf(Array);
        uniqConf[def] = conf;
        return Record;
    };

    Record.uniqNm = uniqNm.specFor(Record);

    extExistence(Record);
    extCreate(Record);
    extModify(Record);
    extRemove(Record);
    Record.sidOfUnique = function (uniqDef, id) {
        return sidOfUnique(Record, uniqDef, id);
    };

    Record.findByUnique = function (uniqDef, id, option) {
        return findByUnique(Record, uniqDef, id, option);
    };
    Record.matchByUnique = function (uniqDef, matchPattern, scanNum, count) {
        return matchByUnique(Record, uniqDef, matchPattern, scanNum, count);
    };

    Record.matchListByUnique = function (option, uniqDef, matchPattern, scanNum, count) {
        return matchListByUnique(Record, option, uniqDef, matchPattern, scanNum, count);
    };

    Record.updateUniqueSet = function () {
        return updateUniqueSet(Record);
    };

    Record.withUnique = function (uniqDef) {
        var uDef = uniqDef + '';
        return {
            sidOf: function (uid) {
                return Record.sidOfUnique(uDef, uid);
            },
            findBy: function (uid, option) {
                return Record.findByUnique(uDef, uid, option);
            },
            matchBy: function (pattern, cursor, count) {
                return Record.matchByUnique(uDef, pattern, cursor, count);
            },
            matchListBy: function (option, pattern, cursor, count) {
                return Record.matchListByUnique(option, uDef, pattern, cursor, count);
            },
            checkAbsenceOf: function (uid) {
                return Record.checkUniqAbsenceOf(uDef, uid);
            },
            checkAbsenceExceptSid: function (sid, uid) {
                return Record.checkUniqAbsenceExceptSid(sid, uDef, uid);
            }
        };
    };

    Record.uniquesSet = true;
};

