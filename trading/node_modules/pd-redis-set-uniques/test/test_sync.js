'use strict';
var expect = require('chai').expect;
var anno = require('pd-api-test-anno')();
var q = require('q');
var _ = require('underscore');

var eReport = require('pd-test-report-error');
var recMaker = require('pd-redis-base-record');
var setUnique = require('../');
var User = recMaker('user');
var Friendship = recMaker('friendship');
setUnique(User, {
    email: ['email'],
    ssn: ['ssn']
});

setUnique(Friendship, {
    invitation: ['inviter', 'invitee']
});

describe('Sync:unique', function () {
    var usersToDelete = [];
    var fsToDelete = [];
    before(function (done) {
        anno.init(function () {
            var promises = [];
            _.range(30).forEach(function (num) {
                promises.push(
                    User.create({
                        email: 'user' + num + '@email.com',
                        ssn: num + num + '-' + num + num
                    }).then(function (sid) {
                        usersToDelete.push(sid);
                        return User.redis.exec('del', User.uniqNm.uniqSetOf('email'));
                    }).then(function () {
                        return User.redis.exec('del', User.uniqNm.uniqSetOf('ssn'));
                    }).fail(function (err) {
                        eReport(err);
                    })
                );
                promises.push(
                    Friendship.create({
                        inviter: 'inviter' + num,
                        invitee: 'invitee' + num
                    }).then(function (sid) {
                        fsToDelete.push(sid);
                        return Friendship.redis.exec('del', Friendship.uniqNm.uniqSetOf('invitation'));
                    }).fail(function (err) {
                        eReport(err);
                    })
                );
            });
            return q.allSettled(promises);
        }, done, 'Sync:unique');
    });

    it('should sync missed unique set', function (done) {
        anno.tcase(function () {
            var promises = [];
            promises.push(
                User.updateUniqueSet().then(function () {
                    console.log('User index sync executed..');
                }).fail(function (err) {
                    eReport(err);
                })
            );
            promises.push(
                Friendship.updateUniqueSet().then(function () {
                    console.log('Friendship index sync executed..');
                }).fail(function (err) {
                    eReport(err);
                })
            );
            return q.allSettled(promises).then(function () {
                var promises = [];
                User.uniqDefKeys().forEach(function (uniDef) {
                    var uSetKey = User.uniqNm.uniqSetOf(uniDef);
                    promises.push(
                        User.redis.exec('zcard', [uSetKey]).then(function (amount) {
                            expect(amount).to.equal(usersToDelete.length);
                            console.log('Fixed ' + uniDef + ' uniq index..');
                        }).fail(function (err) {
                            eReport(err);
                        })
                    );
                });
                Friendship.uniqDefKeys().forEach(function (uniDef) {
                    promises.push(
                        Friendship.redis.exec('zcard', Friendship.uniqNm.uniqSetOf(uniDef)).then(function (amount) {
                            expect(amount).to.equal(fsToDelete.length);
                            console.log('Fixed ' + uniDef + ' uniq index..');
                        }).fail(function (err) {
                            eReport(err);
                        })
                    );
                });
                return q.allSettled(promises);
            });
        }, done, 'sync');
    });

    after(function (done) {
        anno.fin(function () {
            var promises = [];
            usersToDelete.forEach(function (sid) {
                promises.push(
                    User.remove(sid).then(function () {
                        return User.clearSidCounter();
                    })
                );
            });
            fsToDelete.forEach(function (sid) {
                promises.push(
                    Friendship.remove(sid).then(function () {
                        return Friendship.clearSidCounter();
                    })
                );
            });
            return q.allSettled(promises);
        }, done, 'Sync:unique');
    });
});