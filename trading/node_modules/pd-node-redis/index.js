'use strict';
var exec = require('./lib/exec');
var zsetLates = require('./lib/zset-latest');
var multi = require('./lib/multi');
var scanMatch = require('./lib/scan-match');
var zsetExists = require('./lib/zset-exists');
var converters = require('./lib/converter/index');
var utility = {
    /**
     *
     * @param {string} command
     * @param {string|Array} args - if it is a string, it just represents only one param
     * @param {object} [cli]
     * @returns {promise}
     */
    exec: function (command, args, cli) {
        return exec.apply(this, arguments);
    },

    /**
     *
     * @param {string} key
     * @param {object} opt
     *                 - latest : number
     *                 - earliest : number
     *                 - [limit] : [number, number]
     * @param {object} [cli]
     * @returns {*}
     */
    zsetLatest: function (key, opt, cli) {
        return zsetLates.apply(this, arguments);
    },

    /**
     *
     * @param {string} setKey
     * @param {string} itemToMatch
     * @param {object} [cli]
     * @returns {*}
     */
    zsetExists: function (setKey, itemToMatch, cli) {
        return zsetExists.apply(this, arguments);
    },

    /**
     *
     * @param {Array[][]}cmdList
     * @param {object} [cli]
     * @returns {promise}
     */
    multi: multi,

    /**
     *
     * @param {string} scanKey
     * @param {string} [itemToMatch] - if not give, it scans all. If the latter params are need, this should be set undfined or null
     * @param {string} [command] - by default 'scan', if cli is needed this should be set undefined or null
     * @param {object} [cli]
     * @returns {promise}
     */
    scanMatch: scanMatch,

    /**
     *
     * @param {string} key
     * @param {object} cli
     * @returns {promise}
     */
    zScanAll: function (key, cli) {
        return scanMatch.call(this, key, null, 'zscan', cli);
    }
};

var keysToSpec = Object.keys(utility);
utility.converters = converters;
module.exports = utility;
module.exports.via = function (cli) {
    var ret = {};
    keysToSpec.forEach(function (key) {
        ret[key] = function () {
            var inputArgs = Array.prototype.slice.call(arguments || []);
            inputArgs.push(cli);
            return utility[key].apply(utility, inputArgs);
        };
    });
    ret.cli = cli;
    return ret;
};