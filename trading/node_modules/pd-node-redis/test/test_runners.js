'use strict';
var q = require('q');
var _ = require('underscore');
var expect = require('chai').expect;
var anno = require('pd-api-test-anno')();
var redis = require('../');
var eReport = require('./report-error');
var logClient = require('./log-cli');
var storeClient = require('./store-cli');
var announcer = require('pd-api-announcer');

describe('Redis:runner', function () {
    var MyKey = 'First-Key';
    var MyValue = 'This is my first value..';
    var redises = [
        redis.via(storeClient),
        redis.via(logClient)
    ];

    var clearAll = function () {
        var promises = [];
        redises.forEach(function (redis) {
            promises.push(
                redis.exec('del', MyKey)
            );
        });
        return q.allSettled(promises);
    };

    before(function (done) {
        anno.init(function () {
            return clearAll();
        }, done, 'Redis:runner');
    });

    it('should exec', function (done) {
        anno.tcase(function () {
            return redis.exec('set', [MyKey, MyValue]).then(function (reply) {
                expect(reply).to.equal('OK');
                console.log('value returns right feedback...');
                return redis.exec('get', MyKey);
            }).then(function (reply) {
                expect(reply).to.equal(MyValue);
                console.log('Saw value set..');
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'Redis:exec');
    });

    it('should exec on different servers', function (done) {
        anno.tcase(function () {
            var promises = [];
            redises.forEach(function (redis, i) {
                promises.push(
                    redis.exec('set', [MyKey, 'val' + i]).fail(function (err) {
                        eReport(err);
                    })
                );
            });
            return q.allSettled(promises).then(function (results) {
                announcer.assertFulfilledPromises(results, 'set processes on different servers');
                var promises = [];
                redises.forEach(function (redis, i) {
                    promises.push(
                        redis.exec('get', MyKey).then(function (result) {
                            expect(result).to.equal('val' + i + '');
                            console.log('Get correct number in server ' + i);
                        })
                    );
                });
                return q.allSettled(promises).then(function (results) {
                    announcer.assertFulfilledPromises(results, 'get processes on different servers');
                });
            });
        }, done, 'Redis:exec:differen-servers');
    });

    it('should throw errors', function (done) {
        anno.tcase(function () {
            return redis.exec('oo', 'go').then(function () {
                eReport('Missed wrong exec command!');
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, 'redis-cmd', 'unsupported:oo');
                console.log('Wrong command type caught...');
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'Redis:exception');
        console.log('Starting exception test of exec........................');

    });

    var assertMultiSet = function (redis, nums, prefix, assertEach) {
        var promises = [];
        nums.forEach(function (i) {
            var keyName = '' + prefix + i;
            promises.push(redis.exec('get', [keyName]).then(function (reply) {
                assertEach(reply, i, keyName);
            }).fail(function (err) {
                eReport(err);
            }));
        });
        return q.allSettled(promises);
    };
    var deleteKeyNums = function (redis, nums, prefix) {
        var toDeletes = _.map(nums, function (i) {
            return '' + prefix + i;
        });
        return redis.exec('del', toDeletes);
    };

    it('should run multi', function (done) {
        anno.tcase(function () {
            var promises = [];
            redises.forEach(function (redis) {
                var numKeys = _.range(5);
                var list = [];
                numKeys.forEach(function (i) {
                    list.push(['set', 'newKey' + i, i]);
                });
                promises.push(
                    redis.multi(list).then(function () {
                        return assertMultiSet(redis, numKeys, 'newKey', function (reply, i, keyName) {
                            expect(reply).to.equal(i.toString());
                            console.log('Found ' + keyName + ' set..');
                        });
                    }).then(function () {
                        return deleteKeyNums(redis, numKeys, 'newKey');
                    }).fail(function (err) {
                        eReport(err);
                    })
                );
            });
            return q.allSettled(promises).then(function (results) {
                console.log(results);
                announcer.assertFulfilledPromises(results, 'multi processes');
            });
        }, done, 'multi');
    });


    after(function (done) {
        anno.fin(function () {
            return clearAll();
        }, done, 'Redis:runners');
    });
});