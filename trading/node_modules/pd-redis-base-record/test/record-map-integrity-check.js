'use strict';
var q = require('q');
var _ = require('underscore');
var announcer = require('pd-api-announcer');

module.exports = function (Record) {
    var nomen = Record.nm;
    var redis = Record.redis;
    var coreCheck = function (sid, created) {
        announcer.assertBoolean(created, 'created');
        return q.Promise(function (resolve, reject) {
            var healthy = {
                data: true,
                sidSet: true
            };
            var check = function () {
                var symptom = created ? 'missing' : 'uncleaned';
                var illPart = _.find(['data', 'sidSet'], function (item) {
                    return !healthy[item];
                });
                if (illPart) {
                    throw new Error(symptom + '-' + illPart);
                }
            };
            var flag = created ? 1 : 0;
            var sidSetKey = nomen.sidSet();
            var dataKey = nomen.dataForSid(sid);
            return redis.exec('exists', dataKey).then(function (reply) {
                healthy.data = (parseInt(reply) === flag);
                check();
                return redis.exec('zscan', [sidSetKey, 0, 'MATCH', sid]);
            }).then(function (reply) {
                var replyFlag = (reply[1] || [])[0] === (sid + '') ? 1 : 0;
                healthy.sidSet = replyFlag === flag;
                check();
                resolve(1);
            }).fail(function (err) {
                reject(err);
            });
        });
    };


    return {
        /**
         * check if both mapped sid and data of a record exist after it is created
         * failure in checking may indicate data corruption
         * @param sid - the sid of the record
         */
        creation: function (sid) {
            return coreCheck(sid, true);
        },


        /**
         * check if both mapped sid and data of a record removed after it is removed
         * failure in checking may indicate data corruption
         * @param sid - the sid of the record
         */
        removal: function (sid) {
            return coreCheck(sid, false);
        }
    };
};
