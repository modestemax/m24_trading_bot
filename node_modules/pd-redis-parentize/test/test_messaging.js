'use strict';
var chai = require('chai');
var expect = chai.expect;

var announcer = require('pd-api-announcer');
var Message = require('./model');
var eReport = require('./report-error');
var anno = require('pd-api-test-anno')();

describe('Message:', function () {
    var NewContentId = '';
    var NewReplyId = '';
    var sentBy = 'johndoe@email.com';

    it('should successfully build a message', function (done) {
        var contentInput = 'this is my first message...';
        anno.tcase(function () {
            return Message.create({
                content: contentInput,
                by: sentBy
            }).then(function (sid) {
                NewContentId = sid;
                console.log('Created message:');
                console.log();
                return Message.findBySid(NewContentId, {
                    fields: ['content']
                });
            }).then(function (reply) {
                expect(reply[0]).to.equal(contentInput);
                console.log('Content saved and found...(findBySid)');
                return Message.findBySid(NewContentId, {
                    withCreatedAt: true
                });
            }).then(function (record) {
                expect(record.content).to.equal(contentInput);
                expect(record.by).to.equal(sentBy);
                expect(parseInt(record.createdAt)).to.be.above((new Date('1970-12-12')).getTime());
                expect(parseInt(record.createdAt)).to.be.below((new Date()).getTime());
                console.log('Content saved and found...(findBySid-hash)');
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'message-sending');
    });

    it('should successfully reply a message', function (done) {
        anno.tcase(function () {
            var contentInput = 'this is my first reply...';
            return Message.bearReply(NewContentId, {
                content: contentInput,
                by: sentBy
            }).then(function (sid) {
                NewReplyId = sid;
                return Message.hasReply(NewContentId, NewReplyId);
            }).then(function () {
                console.log('Found relationship with the master message(hasReply)..');
            }).then(function () {
                return Message.Reply.findBySid(NewReplyId);
            }).then(function (hash) {
                expect(hash.content).to.equal(contentInput);
                expect(hash.by).to.equal(sentBy);
                console.log(hash);
                console.log('Found created reply(findBySid() without field)...');
                return Message.replyAmount(NewContentId);
            }).then(function (amount) {
                expect(amount).to.equal(1);
                console.log('Found reply cardinality becomes 1...(replyAmount)');
                return Message.replySidsOf(NewContentId, {
                    latest: (new Date()).getTime(),
                    earliest: 0
                });
            }).then(function (list) {
                expect(list[0][0]).to.equal(NewReplyId + '');
                console.log(list);
                console.log('Found reply id in the reply list...(replySidsOf)');
                return Message.repliesOf(NewContentId, {
                    latest: (new Date()).getTime(),
                    earliest: 0,
                    fields: ['content', 'by']
                });
            }).then(function (list) {
                expect(list[0][0]).to.equal(contentInput);
                expect(list[0][1]).to.equal(sentBy);
                console.log('Found reply field values in the list...(repliesOf)');
                return Message.repliesOf(NewContentId, {
                    latest: (new Date()).getTime(),
                    earliest: 0,
                    fields: false
                });
            }).then(function (list) {
                expect(list[0].content).to.equal(contentInput);
                expect(list[0].by).to.equal(sentBy);
                console.log('Found reply hash in the list...(replyHashesOf)');
                return Message.remove(NewContentId);
            }).then(function () {
                eReport('Wrongly removed parent message!!');
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, 'replies', 'non-empty');
                console.log('Prevented parent message from being wrongly deleted...');
                return Message.Reply.remove(NewReplyId);
            }).then(function () {
                return Message.Reply.checkPresence(NewReplyId);
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, 'reply', 'gone');
                console.log('Reply record deleted...');
                return Message.hasReply(NewContentId, NewReplyId);
            }).then(function () {
                eReport('Did not clear the relationship with parentSid!');
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, 'reply', 'gone');
                console.log('Relationship with the parentSid removed..');
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'reply');
    });


    after(function (done) {
        anno.fin(function () {
            return Message.Reply.remove(NewReplyId).then(function () {
                return Message.remove(NewContentId).fail(function(err){
                    eReport(err);
                });
            }).then(function () {
                return Message.Reply.clearSidCounter();
            }).then(function () {
                return Message.clearSidCounter();
            }).fail(function (err) {
                console.log('message error');
                eReport(err);
            });
        }, done, 'Messaging');
    });
});

