'use strict';
var chai = require('chai');
var expect = chai.expect;
var q = require('q');

var announcer = require('pd-api-announcer');
var Message = require('./model');
var eReport = require('./report-error');
var anno = require('pd-api-test-anno')();

describe('Parentization-wrap', function () {
    var NewMessageId = '';
    var NewReplyId = '';
    var sentBy = 'johndoe@email.com';
    var ReplyMom;
    before(function (done) {
        anno.init(function () {
            return Message.create({
                content: 'first of all, first message',
                by: sentBy
            }).then(function (sid) {
                NewMessageId = sid;
                ReplyMom = Message.replyOwner(NewMessageId);
            });
        }, done, 'Parentization-wrap');
    });

    it('should bear child', function (done) {
        anno.tcase(function () {
            return ReplyMom.hasKid(NewReplyId).then(function () {
                throw new Error('missed non existed reply!');
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, 'reply', 'gone');
                console.log('hasKid found no match..');
                return ReplyMom.kidAmount();
            }).then(function (kidAmount) {
                expect(kidAmount).to.equal(0);
                console.log('reply amount is ' + kidAmount + '..');
                return ReplyMom.bear({
                    content: 'indeed...',
                    by: sentBy
                });
            }).then(function (sid) {
                NewReplyId = sid;
                console.log('reply creation executed');
                return ReplyMom.hasKid(NewReplyId);
            }).then(function () {
                console.log('hasKid found match');
                return ReplyMom.findKidSids({
                    latest: (new Date()).getTime(),
                    earliest: 0
                });
            }).then(function (sids) {
                expect(sids.length).to.equal(1);
                console.log('got sid list..');
                console.log(sids);
                return ReplyMom.findKids({
                    latest: (new Date()).getTime(),
                    earliest: 0,
                    withCreatedAt: true
                });
            }).then(function (records) {
                expect(records.length).to.equal(1);
                console.log('got records..');
                console.log(records);
                return ReplyMom.kidAmount();
            }).then(function (amount) {
                expect(amount).to.equal(1);
                console.log('got updated kid amount ' + amount);
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'bearing-child');
    });

    after(function (done) {
        anno.fin(function () {
            return Message.Reply.remove(NewReplyId).then(function () {
                return Message.remove(NewMessageId);
            }).then(function () {
                return q.allSettled([
                    Message.clearSidCounter(),
                    Message.Reply.clearSidCounter()
                ]);
            });
        }, done, 'Parentization-wrap');
    });
});