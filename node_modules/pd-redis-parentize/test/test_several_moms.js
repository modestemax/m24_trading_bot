'use strict';
var chai = require('chai');
var expect = chai.expect;
var q = require('q');
var _ = require('underscore');
var modelMaker = require('pd-redis-base-record');
var parentize = require('../');

var announcer = require('pd-api-announcer');
var eReport = require('./report-error');
var anno = require('pd-api-test-anno')();

var Message = require('./model');
var User = modelMaker('user');
var Department = modelMaker('department');
var System = modelMaker('system');
parentize(User, Message);
parentize(Department, Message);
parentize(System, Message);
parentize(Message, Message);

describe('Multi-parent', function () {
    var toDelete = {
        user: [],
        department: [],
        message: [],
        messageMother: [],
        system: []
    };

    var MomSystem;

    before(function (done) {
        anno.init(function () {
            var momPromises = [];
            momPromises.push(
                System.create({
                    name: 'linux'
                }).then(function (sid) {
                    toDelete.system.push(sid);
                })
            );

            _.range(5).forEach(function (num) {
                [User, Department, Message].forEach(function (Model) {
                    var modelName = Model.modelName();
                    modelName = modelName === 'message' ? 'messageMother' : modelName;
                    momPromises.push(
                        Model.create({
                            name: 'Robot.' + Model.modelName() + '.' + num
                        }).then(function (momSid) {
                            toDelete[modelName].push(momSid);
                            var kidPromises = [];
                            _.range(3).forEach(function (num) {
                                kidPromises.push(
                                    Model.messageOwner(momSid).bear({
                                        content: 'I,' + Model.modelName() + ' said ' + num
                                    }).then(function (msgSid) {
                                        toDelete.message.push(msgSid);
                                    })
                                );
                            });
                            return q.allSettled(kidPromises);
                        })
                    )
                });
            });
            return q.allSettled(momPromises).then(function (results) {
                var adoptionPromises = [];
                announcer.assertFulfilledPromises(results, 'mom creations');
                MomSystem = System.messageOwner(toDelete.system[0]);
                toDelete.message.forEach(function (msgSid) {
                    adoptionPromises.push(
                        MomSystem.adopt(msgSid)
                    );
                });
                return q.allSettled(adoptionPromises);
            });
        }, done, 'Multi-parent');
    });

    it('should show correct relationship', function (done) {
        anno.tcase(function () {
            return User.messageOwner(toDelete.user[0]).findKids({
                latest: (new Date()).getTime(),
                earliest: 0,
                withCreatedAt: true
            }).then(function (kids) {
                expect(kids.length).to.equal(3);
                kids.forEach(function (kid) {
                    expect(kid.systemSid).to.equal(toDelete.system[0] + '');
                    console.log(kid);
                });
            });
        }, done, 'show relationship');
    });

    after(function (done) {
        anno.fin(function () {
            var kidPromises = [];
            toDelete.message.forEach(function (msgId) {
                kidPromises.push(
                    Message.remove(msgId, function (multis) {
                        expect(multis.length).to.equal(4);
                        return multis;
                    }).fail(function (err) {
                        eReport(err);
                    })
                );
            });
            return q.allSettled(kidPromises).then(function () {
                var momPromises = [];
                [User, Department, System, Message].forEach(function (Model) {
                    var modelName = Model.modelName();
                    modelName = modelName === 'message' ? 'messageMother' : modelName;
                    toDelete[modelName].forEach(function (sid) {
                        momPromises.push(
                            Model.remove(sid).fail(function (err) {
                                eReport(err);
                            })
                        );
                    });
                });
                return q.allSettled(momPromises).then(function () {
                    var clearPromises = [];
                    [User, Department, Message, System].forEach(function (Model) {
                        clearPromises.push(
                            Model.clearSidCounter()
                        );
                    });
                    return q.allSettled(clearPromises);
                });
            });
        }, done, 'Multi-parent');
    })
});