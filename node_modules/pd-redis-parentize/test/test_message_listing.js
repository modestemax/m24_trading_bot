'use strict';
var chai = require('chai');
var expect = chai.expect;
var q = require('q');
var _ = require('underscore');
var announcer = require('pd-api-announcer');
var Message = require('./model');
var anno = require('pd-api-test-anno')();
var eReport = require('./report-error');

describe('Message:', function () {
    var msgsToDelete = [];
    var repliesToDelete = [];
    before(function (done) {
        anno.init(function () {
            var promises = [];
            _.range(1, 6).forEach(function (i) {
                var email = 'myhost' + i + '@email.com';
                promises.push(
                    Message.create({
                        content: 'I said ' + i,
                        by: email
                    }).then(function (sid) {
                        msgsToDelete.push(sid);
                        var replyPromiese = [];
                        _.range(5).forEach(function () {
                            replyPromiese.push(
                                Message.bearReply(sid, {
                                    content: 'I replied ' + i + ' at sid ' + sid,
                                    by: email
                                }).then(function (rSid) {
                                    repliesToDelete.push(rSid);
                                }).fail(function (err) {
                                    eReport(err);
                                })
                            );
                        });
                        return q.allSettled(replyPromiese);
                    }).fail(function (err) {
                        eReport(err);
                    })
                );
            });
            return q.allSettled(promises);
        }, done, 'Message-list');
    });

    it('should show all content information', function (done) {
        anno.tcase(function () {
            return Message.range({
                latest: (new Date()).getTime(),
                earliest: 0,
                fields: ['pd-sid', 'content', 'by']
            }).then(function (list) {
                var rPromises = [];
                list.forEach(function (item) {
                    console.log(item);
                    rPromises.push(
                        Message.repliesOf(item[0], {
                            latest: (new Date()).getTime(),
                            earliest: 0
                        }).then(function (replies) {
                            console.log('\n');
                            console.log('replies-of:' + item[0]);
                            replies.forEach(function (reply) {
                                console.log(reply);
                            });
                        })
                    );
                });
                return q.allSettled(rPromises);
            }).then(function (results) {
                announcer.assertFulfilledPromises(results, 'show content processes');
                return Message.findBySid(msgsToDelete[0], {
                    fields: ['content']
                });
            }).then(function (result) {
                expect(result[0]).to.equal('I said 1');
                console.log('content got..');
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'list-all');

    });

    after(function (done) {
        anno.fin(function () {
            var promises = [];
            repliesToDelete.forEach(function (rSid) {
                promises.push(
                    Message.Reply.remove(rSid).fail(function (err) {
                        eReport(err);
                    })
                );
            });
            return q.allSettled(promises).then(function () {
                var dMsgPromises = [];
                dMsgPromises.push(
                    Message.Reply.clearSidCounter().fail(function (err) {
                        eReport(err);
                    })
                );
                msgsToDelete.forEach(function (id) {
                    dMsgPromises.push(
                        Message.remove(id).fail(function (err) {
                            eReport(err);
                        })
                    );
                });
                return q.allSettled(dMsgPromises).fin(function () {
                    return Message.clearSidCounter();
                });
            });
        }, done, 'Message-list');
    });
});