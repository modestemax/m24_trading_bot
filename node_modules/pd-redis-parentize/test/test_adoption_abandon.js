'use strict';
var q = require('q');
var _ = require('underscore');

var announcer = require('pd-api-announcer');
var Message = require('./model');

var eReport = require('./report-error');
var anno = require('pd-api-test-anno')();

describe('Adoption', function () {
    var msgToDelete = [];
    var rplToDelete = [];
    var msgReplyMap = {};

    before(function (done) {
        anno.init(function () {
            var promises = [];
            _.range(5).forEach(function () {
                promises.push(
                    Message.create({
                        content: 'hello world'
                    }).then(function (msgSid) {
                        msgToDelete.push(msgSid);
                        msgReplyMap[msgSid] = [];
                        var kidPromises = [];
                        _.range(3).forEach(function (num) {
                            kidPromises.push(
                                Message.replyOwner(msgSid).bear({
                                    content: 'hello ' + num
                                }).then(function (replySid) {
                                    rplToDelete.push(replySid);
                                    msgReplyMap[msgSid].push(replySid);
                                })
                            );
                        });
                        return q.allSettled(kidPromises);
                    })
                );
            });
            return q.allSettled(promises);
        }, done, 'Adoption');
    });

    it('should abandon a kid', function (done) {
        anno.tcase(function () {
            var msgSid = msgToDelete[0];
            var Mom = Message.replyOwner(msgSid);
            var kidSid = msgReplyMap[msgSid][0];
            return Mom.abandon(msgReplyMap[msgSid][0]).then(function () {
                return Mom.hasKid(kidSid);
            }).then(function () {
                eReport('abandon failed..');
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, 'reply', 'gone');
                console.log('found kid abandoned..');
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'abandon');
    });

    it('should adopt a kid', function (done) {
        anno.tcase(function () {
            var msgSid = msgToDelete[0];
            var Mom = Message.replyOwner(msgSid);
            var kidSid = msgReplyMap[msgSid][0];
            return Mom.adopt(kidSid).then(function () {
                return Mom.hasKid(kidSid);
            }).then(function () {
                console.log('found adopted kid..');
            }).fail(function (err) {
                eReport(err);
            })
        }, done, 'adopt-a-kid');
    });

    after(function (done) {
        anno.fin(function () {
            var kidPromises = [];
            rplToDelete.forEach(function (sid) {
                kidPromises.push(
                    Message.Reply.remove(sid).fail(function (err) {
                        eReport(err);
                    })
                );
            });
            q.allSettled(kidPromises).then(function () {
                var msgPromises = [];
                msgToDelete.forEach(function (sid) {
                    msgPromises.push(
                        Message.remove(sid).fail(function (err) {
                            eReport(err);
                        })
                    );
                });

                return q.allSettled(msgPromises).then(function () {
                    var clearPromises = [];
                    [Message, Message.Reply].forEach(function (model) {
                        clearPromises.push(
                            model.clearSidCounter()
                        );
                    });
                    return q.allSettled(clearPromises);
                });
            });
        }, done, 'Adoption');
    });
});