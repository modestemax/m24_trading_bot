'use strict';
var announcer = require('../');
var expect = require('chai').expect;
var assert = require('chai').assert;
var anno = require('pd-api-test-anno')();
var _ = require('underscore');

describe('', function () {
    var testAssertion = function (assertionName, invalidValues, validValues) {
        it('should assert ' + assertionName, function (done) {
            anno.tcase(function () {
                invalidValues.forEach(function (val) {
                    expect(announcer['is' + assertionName](val)).to.equal(false);
                    console.log('saw ' + val + ' invalid..');
                });
                console.log('....');
                if (!validValues) {
                    return;
                }
                validValues.forEach(function (val) {
                    announcer['assert' + assertionName](val, 'failed <' + assertionName + '> assertion');
                    console.log(val + ' passed assertion..');
                });
            }, done, 'assert' + assertionName);
        });
    };

    testAssertion('NonEmptyString',
        [undefined, null, 1, '', [], _.noop, {}, new Error('a'), new Date()],
        ['a string']);
    testAssertion('NonEmptyArray',
        [undefined, null, 1, '', [], _.noop, {}, 'b', new Error('a'), new Date()],
        [[1, 3]]);
    testAssertion('NonEmptyObject',
        [undefined, null, 1, '', [], _.noop, {}, 'b', new Error('go'), new Date()],
        [{name: 'John Doe'}]);
    testAssertion('StringOrArrayNotEmpty',
        [undefined, null, 1, '', [], _.noop, {}, new Error('go'), new Date()],
        ['abc6', [1, 2, 3]]);

    testAssertion('PdnError',
        [undefined, null, 1, '', [], _.noop, {}, new Error('go'), new Date()],
        [announcer.error.req('email', 'invalid', '&&^%')]);

    testAssertion('ReqError', [undefined, null, 1, '', [], _.noop, {}, new Error('go'), new Date(),
            announcer.error.sys(null, 'crashed')],
        [announcer.error.req('email', 'invalid', '&&^%')]);

    testAssertion('SysError', [undefined, null, 1, '', [], _.noop, {}, new Error('go'), new Date(),
            announcer.error.req('email', 'invalid', '&&^%')],
        [announcer.error.sysMessage('crashed')]);

    testAssertion('FulfilledPromises',
        [undefined, null, 1, '', [], _.noop, {}, new Error('go'), new Date()],
        [[{state: 'fulfilled'}, {state: 'fulfilled'}]]);

    it('Verifiy error assertion syntactic sugars', function (done) {
        anno.tcase(function () {
            var clientError = announcer.error.req('email', 'invalid', '33');
            assert(announcer.error(clientError).isReq(), 'not req error');
            assert(announcer.error(clientError).isReqFor('email', 'invalid'), 'not specific req error');
            console.log('Created and recognized req error.');
            announcer.assertReqErrorFor(clientError, 'email', 'invalid');

            var sysError = announcer.error.sysMessage('crashed');
            assert(announcer.error(sysError).isSys(), 'not sys error');
            console.log('Created and recognized sys error.');

            var sysFieldError = announcer.error.sys('db', 'crashed', 'badly');
            assert(announcer.error(sysFieldError).isSysFor('db', 'crashed'), 'not sys field error');
            announcer.assertSysErrorFor(sysFieldError, 'db', 'crashed');
        }, done, 'Verify error assertion syntactic sugars');
    });
});