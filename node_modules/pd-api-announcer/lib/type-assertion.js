'use strict';
var _ = require('underscore');
var assert = require('chai').assert;

var predicts = {
    isNonEmptyArray: function (fields) {
        return _.isArray(fields) && !_.isEmpty(fields);
    },

    isNonEmptyString: function (val) {
        return _.isString(val) && !_.isEmpty(val);
    },

    isNonEmptyObject: function (val) {
        return _.isObject(val) && !_.isEmpty(val);
    },

    isStringOrArrayNotEmpty: function (val) {
        return (_.isString(val) || _.isObject(val)) && !_.isEmpty(val);
    },

    isBoolean: function (val) {
        return _.isBoolean(val);
    },

    isFunction: function (val) {
        return _.isFunction(val);
    },

    isNumber: function (val) {
        return _.isNumber(val);
    },

    isArray: function (val) {
        return _.isArray(val);
    },

    isPdnError: function (err) {
        return (err instanceof Error) && !!err.isPdn;
    },
    isReqError: function (err) {
        return predicts.isPdnError(err) && err.status === 403;
    },
    isSysError: function (err) {
        return predicts.isPdnError(err) && err.status === 500;
    }
};

_.extend(predicts, {
    isFulfilledPromises: function (qAllSettledResults) {
        return predicts.isNonEmptyArray(qAllSettledResults) && !_.find(qAllSettledResults, function (result) {
                return result.state !== 'fulfilled';
            });
    }
});


_.extend(module.exports, predicts);

_.extend(module.exports,
    (function () {
        var errorsFor = {};
        _.each(['Req', 'Sys'], function (errType) {
            errorsFor['is' + errType + 'ErrorFor'] = function (err, field, message) {
                return predicts['is' + errType + 'Error'](err) &&
                    ((err.errors || {})[field] || {}).message === message;
            };
        });
        return errorsFor;
    }())
);


/**
 * Every isABC functions above will have its assertion counterpart assertABC
 * e.g. isFulfilledPromises ==> assertFulfilledPromises
 * which is done by the following code
 */
var noAssertionPredicts = [
    'isReqErrorFor',
    'isSysErrorFor'
];

_.filter(Object.keys(predicts), function (key) {
    return noAssertionPredicts.indexOf(key) < 0;
}).forEach(function (predictName) {
    var descriptionName = predictName.substring(2);
    var assertName = 'assert' + predictName.substring(2);
    var asserts = {};
    asserts[assertName] = function (value, fieldName) {
        assert(predicts[predictName](value), 'Must-be-' + descriptionName + ':' + (fieldName || ''));
    };
    _.extend(module.exports, asserts);
});

_.each(['Req', 'Sys'], function (asrtField) {
    module.exports['assert' + asrtField + 'ErrorFor'] = function (err, field, message) {
        assert(module.exports['is' + asrtField + 'ErrorFor'](err, field, message),
            'Must-be-' + asrtField + ':' + (field||'') + (message||''));
    };
});


