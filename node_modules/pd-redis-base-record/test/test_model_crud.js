'use strict';
var q = require('q');
var _ = require('underscore');
var expect = require('chai').expect;
var assert = require('chai').assert;
var announcer = require('pd-api-announcer');
var eReport = require('./report-error');
var nmLock = require('pd-redis-lock/lib/nomenclt');
var model = require('../');
var anno = require('pd-api-test-anno')();
var inteChecker = require('./record-map-integrity-check');

describe('Data:model:', function () {
    var modelName = 'user';

    var profile = {
        email: 'user@email.com',
        firstName: 'John'
    };
    var updatedProfile = {
        email: 'user1@email.com',
        firstName: 'Jane'
    };

    var Sid;

    var User = model(modelName);
    var inteCheck = inteChecker(User);

    var clearAll = function () {
        return User.findSidList().then(function (ids) {
            var promises = [];
            ids.forEach(function (id) {
                promises.push(
                    User.remove(id[0]).fail(function (err) {
                        eReport(err);
                    })
                );
            });
            promises.push(
                User.clearSidCounter().fail(function (err) {
                    expect(err.message).to.equal('not-empty-sid-set');
                    console.log('Stopped risky cleaning of sid counter');
                })
            );
            return q.allSettled(promises);
        }).then(function () {
            return User.clearSidCounter();
        }).then(function () {
            return User.redis.exec('get', User.nm.sidValue()).then(function (val) {
                assert(val === null, 'sid counter not cleared');
                console.log('cleared sid counter..');
            });
        }).fail(function (err) {
            eReport(err);
        });
    };

    before(function (done) {
        anno.init(function () {
            expect(User.modelName()).to.equal(modelName);
            return clearAll().fin(function () {
                var promises = [];
                _.range(6).forEach(function (i) {
                    promises.push(
                        User.create({
                            email: 'name' + i + '-1@email.com',
                            firstName: 'myName' + i
                        }, function (multi) {
                            console.log(multi);
                            return multi;
                        }).fail(function (err) {
                            eReport(err);
                        })
                    );
                });
                return q.allSettled(promises);
            });
        }, done, 'Model-CRUD');

    });

    it('should list all created sid', function (done) {
        anno.tcase(function () {
            return User.findSidList().then(function (list) {
                expect(list.length).to.equal(6);
                list.forEach(function (item) {
                    console.log(item);
                });
                return User.amount();
            }).then(function (cardin) {
                expect(cardin).to.equal(6);
                console.log('Returned the cardinality of the sid set..');
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'list-ids');
    });

    it('should range all record', function (done) {
        anno.tcase(function () {
            return User.rangeSidList({
                latest: (new Date()).getTime(),
                earliest: 0
            }).then(function (ids) {
                expect(ids.length).to.equal(6);
                console.log('Ranged all ids...');
                return User.range({
                    latest: (new Date()).getTime(),
                    earliest: 0,
                    fields: ['email', 'firstName'],
                    withCreatedAt: true
                });
            }).then(function (fulllist) {
                expect(fulllist.length).to.equal(6);
                console.log('Ranged all records....');
                fulllist.forEach(function (item) {
                    console.log(item);
                });
                return User.range({
                    latest: (new Date()).getTime(),
                    earliest: 0,
                    withCreatedAt: true
                });
            }).then(function (fullList) {
                expect(fullList.length).to.equal(6);
                console.log('Ranged all records in hash....');
                fullList.forEach(function (item) {
                    console.log(item);
                });
            });
        }, done, 'range');

    });

    it('should create data of a specific model', function (done) {
        anno.tcase(function () {
            var prof = _.extend({}, profile);
            return User.create(prof).then(function (sid) {
                Sid = prof['pd-sid'] = sid;
                console.log('created profile:');
                console.log(prof);
                return User.create(prof);
            }).then(function () {
                eReport('Missed duplication check!');
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, modelName, 'taken');
                console.log('Stopped duplication creating attempt..');
                return User.checkAbsence(Sid);
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, modelName, 'taken');
                console.log('Check-absence functioned...');
                return User.checkSidSetAbsence(Sid);
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, modelName, 'taken');
                console.log('Check-index-absence functioned...');
                return User.checkPresence(Sid);
            }).then(function () {
                console.log('Check-presence functioned...');
                return User.checkSidSetPresence(Sid);
            }).then(function () {
                console.log('Check-index-presence functioned..');
                return User.findBySid(Sid, {
                    fields: ['email', 'firstName'],
                    withCreatedAt: true
                });
            }).then(function (record) {
                expect(record[0]).to.equal(profile.email);
                expect(record[1]).to.equal(profile.firstName);
                expect(record[2]).to.be.a('number');
                console.log(record);
                console.log('Get the desired field data of the record with getOne...');
                return User.findBySid(Sid, {
                    withCreatedAt: true
                });
            }).then(function (record) {
                Object.keys(profile).forEach(function (key) {
                    expect(record[key]).to.equal(profile[key]);
                });
                expect(record.createdAt).to.be.a('number');
                console.log(record);
                console.log('Get the created record of hash with getOne-hash....');
                return inteCheck.creation(Sid);
            }).then(function () {
                console.log('data and index of a given record remained creation integrity..');
                return User.remove(Sid);
            }).fin(function () {
                return inteCheck.removal(Sid);
            }).then(function () {
                console.log('data and index of a given record remained removal integrity..');
                console.log('Created record deleted...');
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'create');
    });


    it('should modify data appropriately', function (done) {
        anno.tcase(function () {
            updatedProfile['pd-sid'] = Sid + '1';
            return User.modify(updatedProfile).then(function () {
                eReport('missed non-existing record!');
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, modelName, 'gone');
                console.log('Stopped modifying non-existing record..');
                return User.checkPresence(Sid);
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, modelName, 'gone');
                console.log('Check-presence functioned..');
                return User.checkSidSetPresence(Sid);
            }).fail(function (err) {
                announcer.assertSysErrorFor(err, modelName, 'gone');
                console.log('Check-index-presence functioned..');
                return User.checkAbsence(Sid);
            }).then(function () {
                console.log('Check-absence functioned....');
                return User.checkSidSetAbsence(Sid);
            }).then(function () {
                console.log('Check-index-absence functioned..');
                return User.create(_.extend({}, profile));
            }).then(function (sid) {
                updatedProfile['pd-sid'] = Sid = sid;
                console.log('Re-created the record..');
                return User.modify(updatedProfile);
            }).then(function () {
                console.log('modification executed...');
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'modify');
    });

    it('should build data model related lock', function (done) {
        anno.tcase(function () {
            var nm = User.nm;
            return User.lock.sidSet(function () {
                return User.redis.exec('get', nmLock(nm.sidSet())).then(function (reply) {
                    expect(parseInt(reply)).to.be.a('number');
                    console.log('Got lock timestamp for index lock....');
                    console.log(reply);
                });
            }, 800).then(function () {
                return User.lock.dataForSid(Sid, function () {
                    return User.redis.exec('get', nmLock(nm.dataForSid(Sid))).then(function (reply) {
                        expect(parseInt(reply)).to.be.a('number');
                        console.log('Got lock timestamp for ids lock.....');
                        console.log(reply);
                    });
                }, 1000);
            }).fail(function (err) {
                eReport(err);
            });
        }, done, 'lock');
    });

    after(function (done) {
        anno.fin(function () {
            return clearAll();
        }, done, 'Model-CRUD');
    });
});