'use strict';
var _ = require('underscore');
var redisUti = require('pd-node-redis');
var amount = require('./lib/amount');
var findSidList = require('./lib/find-sid-list');
var rangeSidList = require('./lib/range-sid-list');
var findBySid = require('./lib/find-by-sid');
var range = require('./lib/range');
var genLock = require('./lib/lock');
var existence = require('./lib/existence');
var sidSetExistence = require('./lib/sid-set-existence');
var nomen = require('./lib/nomenclt');
var findBySidList = require('./lib/find-by-sid-list');
var announcer = require('pd-api-announcer');

var create = require('./lib/create');
var modify = require('./lib/modify');
var remove = require('./lib/remove');
var clearSidCounter = require('./lib/clear-sid-counter');

module.exports = function (modelName, cli) {
    var mName = (modelName || '').toLowerCase();
    var redis = redisUti.via(cli);
    announcer.assertNonEmptyString(mName, 'modelName');
    var nomenclature = nomen.specFor(modelName);
    var Record = {
        isRedisModel: true,
        nm: nomenclature,
        redis: redis,
        modelName: function () {
            return mName;
        }
    };
    return _.extend(Record, {
        lock: genLock.specFor(Record),
        amount: function () {
            return amount(Record);
        },
        findSidList: function () {
            return findSidList(Record);
        },
        rangeSidList: function (option) {
            return rangeSidList(Record, option);
        },
        findBySidList: function (idList, option) {
            return findBySidList(Record, idList, option);
        },
        findBySid: function (sid, option) {
            return findBySid(Record, sid, option);
        },
        range: function (option) {
            return range(Record, option);
        },
        checkAbsence: function (sid) {
            return existence.checkAbsence(Record, sid);
        },
        checkPresence: function (sid) {
            return existence.checkPresence(Record, sid);
        },
        checkSidSetAbsence: function (sid) {
            return sidSetExistence.checkSidSetAbsence(Record, sid);
        },
        checkSidSetPresence: function (sid) {
            return sidSetExistence.checkSidSetPresence(Record, sid);
        },
        create: function (profile, multiGen) {
            return create(Record, profile, multiGen);
        },
        modify: function (profile, multiGen) {
            return modify(Record, profile, multiGen);
        },
        remove: function (sid, multiGen) {
            return remove(Record, sid, multiGen);
        },
        clearSidCounter: function () {
            return clearSidCounter(Record);
        }
    });
};