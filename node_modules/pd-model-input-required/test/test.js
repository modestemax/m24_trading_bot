'use strict';
var q = require('q');
var util = require('util');
var _ = require('underscore');
var expect = require('chai').expect;
var assert = require('chai').assert;
var eReport = require('pd-test-report-error');
var anno = require('pd-api-test-anno')();
var announcer = require('pd-api-announcer');
var modelMaker = require('pd-redis-model');
var User = modelMaker('user');
var validator = require('validator');
var setInputRequired = require('../');
setInputRequired(User);
User.needInputOf('email');
User.needInputOf(['name', 'password']);
User.eachInputOf('email').mustMatch(function (email) {
    return validator.isEmail(email);
});
User.eachInputOf('password').mustMatch(/^\w{6,18}$/);


describe('Input-required', function () {
    var Profile = {
        name: 'johndoe',
        password: '12345678',
        email: 'myemail@email.com',
        status: 'active'
    };
    var Sid;

    it('should prevent record with invalid input from being created', function (done) {
        anno.tcase(function () {
            return User.create().then(function () {
                console.error('Missed empty record!');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'email', 'empty');
                console.log('Caught empty email..');
                return User.create({
                    email: Profile.email
                });
            }).then(function () {
                console.error('Missed empty record!');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'name', 'empty');
                console.log('Caught empty name..');
                return User.create({
                    email: Profile.email,
                    name: Profile.name
                });
            }).then(function () {
                console.error('Missed empty record!');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'password', 'empty');
                console.log('Caught empty password');
                return User.create(
                    _.extend({}, Profile, {
                        email: Profile.email + '&&---'
                    })
                );
            }).then(function () {
                eReport('Missed wrong-formatted email!');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'email', 'format');
                console.log('Caught wrong formatted email..');
                return User.create(
                    _.extend({}, Profile, {
                        password: Profile.password + '&&---8888'
                    })
                );
            }).then(function () {
                eReport('Missed wrong-formatted password!');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'password', 'format');
                console.log('Caught wrong formatted password..');
            }).then(function () {
                return User.create(Profile);
            }).then(function (sid) {
                Sid = sid;
                return User.findBySid(Sid);
            }).then(function (rec) {
                console.log('User created..');
                console.log(rec);
            });
        }, done, 'create');
    });

    it('should prevent record with invalid input from being modified', function (done) {
        anno.tcase(function () {
            return User.modify({
                'pd-sid': Sid,
                email: ''
            }).then(function () {
                eReport('missed empty email..');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'email', 'empty');
                console.log('Caught empty email..');
                return User.modify(
                    _.extend({}, Profile, {
                        email: Profile.email + '&&----||'
                    })
                );
            }).then(function () {
                eReport('missed wrong-formatted email!');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'email', 'format');
                console.log('Caught wrong formatted email..');
                return User.modify({
                    'pd-sid': Sid,
                    password: ''
                });
            }).then(function () {
                eReport('missed empty password..');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'password', 'empty');
                console.log('Caught empty password..');
                return User.modify({
                    'pd-sid': Sid,
                    password: Profile.password + '%%&&--'
                });
            }).then(function () {
                eReport('missed wrongly formatted password!');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'password', 'format');
                console.log('Caught wrong formatted password..');
                return User.modify({
                    'pd-sid': Sid,
                    name: ''
                });
            }).then(function () {
                eReport('missed empty name!');
            }).fail(function (err) {
                announcer.assertReqErrorFor(err, 'name', 'empty');
                console.log('Caught empty name..');
                return User.modify({
                    'pd-sid': Sid,
                    email: 'a' + Profile.email,
                    password: 'a' + Profile.password,
                    status: ''
                });
            }).then(function () {
                return User.findBySid(Sid);
            }).then(function (rec) {
                console.log('User modified..');
                console.log(rec);
            });
        }, done, 'modify');
    });

    after(function (done) {
        anno.fin(function () {
            return User.remove(Sid).fail(function (err) {
                eReport(err);
            }).fin(function () {
                return User.clearSidCounter();
            });
        }, done, 'Input-required');
    });
});
