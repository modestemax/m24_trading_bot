'use strict';
var q = require('q');
var announcer = require('pd-api-announcer');

module.exports = function (Record) {
    var oldModify = Record.modify;
    var traverseDefs = function (traverser) {
        Record.uniqDefKeys().forEach(traverser);
    };

    Record.modify = function (profile, multiGen) {
        var nomen = Record.uniqNm;
        var allCheckPromises = [];

        var sid = profile['pd-sid'];
        var inputFields = Object.keys(profile);
        var inputUniqAmounts = {};
        traverseDefs(function (def) {
            var uid = nomen.uniqIdOf(def, profile);
            var inputUniqAmount = 0;
            var uniqFields = Record.uniqFieldsOf(def);
            uniqFields.forEach(function (uField) {
                inputUniqAmount += inputFields.indexOf(uField) >= 0 ? 1 : 0;
            });
            inputUniqAmounts[def] = inputUniqAmount;
            allCheckPromises.push(
                q.Promise(function (reslv) {
                    if (inputUniqAmount > 0 && inputUniqAmount !== uniqFields.length) {
                        throw announcer.error.sys(def, 'partial-unique-change');
                    }
                    reslv(
                        inputUniqAmount > 0 ? Record.checkUniqAbsenceExceptSid(sid, def, uid) : true
                    );
                })
            );
        });

        var multiGn = function (multis, profile) {
            var mulGenArgs = arguments;
            return q.Promise(function (reslv) {
                var setUpMultis = function (multis, sid, uniqDef) {
                    var setKey = nomen.uniqSetOf(uniqDef);
                    if (inputUniqAmounts[uniqDef] === 0) {
                        //if no unique field input, skip
                        return q.Promise(function (reslv) {
                            reslv();
                        });
                    }
                    return Record.redis.exec('zrangebyscore', [setKey, sid + '', sid + '']).then(function (result) {
                        (result || []).forEach(function (oldUid) {
                            var newUid = nomen.uniqIdOf(uniqDef, profile);
                            //only do the change when the unique id need to be changed
                            if (announcer.isNonEmptyString(oldUid) && newUid + '' !== oldUid + '') {
                                multis.push(['zrem', setKey, oldUid]);
                                multis.push(['zadd', setKey, sid, newUid]);
                            }
                        });
                    });
                };

                var promises = [];
                traverseDefs(function (def) {
                    promises.push(
                        setUpMultis(multis, sid, def)
                    );
                });
                reslv(
                    q.allSettled(promises)
                );
            }).then(function () {
                return (multiGen || function (multis) {
                    return multis;
                }).apply(Record, mulGenArgs);
            });
        };

        return q.all(allCheckPromises).then(function () {
            return oldModify.call(Record, profile, multiGn);
        });
    };
};
